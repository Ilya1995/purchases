{"version":3,"sources":["components/Header.tsx","components/ModalLogin.tsx","components/ItemAdd.tsx","selectors.ts","components/ItemList.tsx","components/Home.tsx","actions/users.ts","types/index.ts","App.tsx","reducers/users.ts","reducers/index.ts","index.tsx","config.ts"],"names":["Header","user","useSelector","state","users","AppBar","position","Toolbar","style","flexGrow","display","Grid","container","direction","alignItems","Box","name","IconButton","color","React","memo","props","Dialog","open","aria-labelledby","aria-describedby","DialogContent","Container","component","maxWidth","marginTop","flexDirection","Avatar","Typography","variant","width","onSubmit","event","preventDefault","login","currentTarget","value","password","checkAuth","TextField","margin","required","fullWidth","id","label","autoComplete","autoFocus","type","Button","titleItem","useState","newItemText","setNewItemText","inputEl","useRef","document","createElement","firebase","useFirebase","addItem","text","trim","newItem","completed","push","current","focus","justify","inputRef","onChange","target","aria-label","onClick","className","fontSize","sortItemsSelector","createSelector","ordered","items","reverse","sort","a","b","call","removeItem","key","remove","isLoaded","isEmpty","textAlign","List","map","item","labelId","ListItem","button","divider","ListItemIcon","Checkbox","inputProps","checked","update","updateItem","ListItemText","primary","ListItemSecondaryAction","forEach","TabPanel","children","index","other","role","hidden","py","setValue","dispatch","useDispatch","useFirebaseConnect","path","Tabs","newValue","indicatorColor","textColor","Tab","onChangeIndex","authUser","find","passwordHash","verify","localStorage","setItem","JSON","stringify","payload","putUser","App","initialState","rootReducer","combineReducers","action","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Storage","parse","store","createStore","composeWithDevTools","applyMiddleware","logger","rrfProps","config","userProfile","useFirestoreForProfile","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.07dcd6cb.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { RootReducerType } from '../reducers';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const Header: React.FC = () => {\r\n  const user = useSelector((state: RootReducerType) => state.users.user);\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <div style={{ flexGrow: 1 }} />\r\n        <div style={{ display: 'flex' }}>\r\n          <Grid container direction=\"row\" alignItems=\"center\">\r\n            {user && <Box>Привет, {user.name}</Box>}\r\n\r\n            <IconButton color=\"inherit\">\r\n              <AccountCircle />\r\n            </IconButton>\r\n          </Grid>\r\n        </div>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { UserAuthType } from '../types';\r\n\r\ntype PropsType = {\r\n  checkAuth: ({ login, password }: UserAuthType) => void;\r\n};\r\n\r\nconst ModalLogin: React.FC<PropsType> = props => {\r\n  const handleClickAuth = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const login = event.currentTarget.login.value;\r\n    const password = event.currentTarget.password.value;\r\n\r\n    props.checkAuth({ login, password });\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={true}\r\n      aria-labelledby=\"scroll-dialog-title\"\r\n      aria-describedby=\"scroll-dialog-description\"\r\n    >\r\n      <DialogContent>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <div\r\n            style={{\r\n              marginTop: 50,\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center'\r\n            }}\r\n          >\r\n            <Avatar>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Авторизация\r\n            </Typography>\r\n            <form\r\n              style={{ width: '100%', marginTop: '8px' }}\r\n              onSubmit={handleClickAuth}\r\n            >\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"login\"\r\n                label=\"Login\"\r\n                name=\"login\"\r\n                autoComplete=\"login\"\r\n                autoFocus\r\n              />\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n              />\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ margin: '24px 0 16px' }}\r\n              >\r\n                Войти\r\n              </Button>\r\n            </form>\r\n          </div>\r\n        </Container>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default React.memo(ModalLogin);\r\n","import React, { useRef } from 'react';\r\nimport { useFirebase } from 'react-redux-firebase';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleOutline from '@material-ui/icons/AddCircleOutline';\r\n\r\ntype PropsType = {\r\n  titleItem: string;\r\n};\r\n\r\nconst ItemAdd: React.FC<PropsType> = ({ titleItem }) => {\r\n  const [newItemText, setNewItemText] = React.useState('');\r\n  const inputEl = useRef(document.createElement('input'));\r\n  const firebase = useFirebase();\r\n\r\n  const addItem = () => {\r\n    const text = newItemText.trim();\r\n    const newItem = {\r\n      text: text,\r\n      completed: false\r\n    };\r\n    if (text) {\r\n      firebase.push(titleItem, newItem);\r\n      setNewItemText('');\r\n      inputEl.current.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          style={{ width: '70%' }}\r\n          value={newItemText}\r\n          inputRef={inputEl}\r\n          onChange={event => setNewItemText(event.target.value)}\r\n        />\r\n        <IconButton\r\n          aria-label=\"comments\"\r\n          onClick={addItem}\r\n          className=\"icon-button\"\r\n        >\r\n          <AddCircleOutline color=\"primary\" fontSize=\"large\" />\r\n        </IconButton>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={addItem}\r\n          color=\"primary\"\r\n          className=\"button\"\r\n        >\r\n          Добавить\r\n        </Button>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(ItemAdd);\r\n","import { createSelector } from 'reselect';\r\nimport { RootReducerType } from './reducers';\r\nimport { ItemFirebaseType } from './types';\r\n\r\nexport const sortItemsSelector = (titleItem: string) =>\r\n  createSelector(\r\n    (state: RootReducerType) => state.firebase.ordered[titleItem],\r\n    (items: ItemFirebaseType[]) =>\r\n      items &&\r\n      [...items.reverse()].sort((a, b) =>\r\n        a.value.completed > b.value.completed ? 1 : -1\r\n      )\r\n  );\r\n","import React from 'react';\r\nimport { useFirebase, isLoaded, isEmpty } from 'react-redux-firebase';\r\nimport { useSelector } from 'react-redux';\r\nimport { ItemFirebaseType } from '../types';\r\nimport { sortItemsSelector } from '../selectors';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\ntype PropsType = {\r\n  titleItem: string;\r\n};\r\n\r\nconst ItemList: React.FC<PropsType> = ({ titleItem }) => {\r\n  const items: ItemFirebaseType[] = useSelector(\r\n    sortItemsSelector.call(null, titleItem)\r\n  );\r\n\r\n  const firebase = useFirebase();\r\n\r\n  const updateItem = (item: ItemFirebaseType) => {\r\n    firebase.update(`${titleItem}/${item.key}`, {\r\n      completed: !item.value.completed\r\n    });\r\n  };\r\n\r\n  const removeItem = (key: string) => {\r\n    firebase.remove(`${titleItem}/${key}`);\r\n  };\r\n\r\n  const removeAllItem = () => {\r\n    items.forEach(item => removeItem(item.key));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoaded(items) ? (\r\n        !isEmpty(items) ? (\r\n          <List>\r\n            {items.map((item: ItemFirebaseType) => {\r\n              const labelId = `checkbox-list-label-${item.key}`;\r\n\r\n              return (\r\n                <ListItem key={item.key} button divider>\r\n                  <ListItemIcon>\r\n                    <Checkbox\r\n                      inputProps={{ 'aria-labelledby': labelId }}\r\n                      checked={item.value.completed}\r\n                      className={item.value.completed ? 'color-green' : ''}\r\n                      onChange={() => updateItem(item)}\r\n                    />\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    id={labelId}\r\n                    className={item.value.completed ? 'line-through' : ''}\r\n                    primary={item.value.text}\r\n                  />\r\n                  <ListItemSecondaryAction>\r\n                    <IconButton\r\n                      aria-label=\"comments\"\r\n                      onClick={() => removeItem(item.key)}\r\n                    >\r\n                      <DeleteIcon style={{ color: 'red' }} />\r\n                    </IconButton>\r\n                  </ListItemSecondaryAction>\r\n                </ListItem>\r\n              );\r\n            })}\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={removeAllItem}\r\n              color=\"primary\"\r\n              className=\"button-remove\"\r\n            >\r\n              Удалить все\r\n            </Button>\r\n          </List>\r\n        ) : (\r\n          <Box textAlign=\"center\" component=\"h3\">\r\n            Список пуст\r\n          </Box>\r\n        )\r\n      ) : (\r\n        <Box textAlign=\"center\" component=\"h3\">\r\n          Loading . . .\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(ItemList);\r\n","import React from 'react';\r\nimport { useFirebaseConnect } from 'react-redux-firebase';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport passwordHash from 'password-hash';\r\nimport { RootReducerType } from '../reducers';\r\nimport ModalLogin from './ModalLogin';\r\nimport ItemAdd from './ItemAdd';\r\nimport ItemList from './ItemList';\r\nimport { UserAuthType, UserFirebaseType } from '../types';\r\nimport { putUser } from '../actions/users';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  dir?: string;\r\n  index: any;\r\n  value: any;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box py={3}>{children}</Box>}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nconst Home: React.FC = () => {\r\n  const [value, setValue] = React.useState(0);\r\n  const dispatch = useDispatch();\r\n\r\n  useFirebaseConnect([\r\n    { path: 'purchases' },\r\n    { path: 'others' },\r\n    { path: 'users' }\r\n  ]);\r\n\r\n  const users = useSelector(\r\n    (state: RootReducerType) => state.firebase.ordered.users\r\n  );\r\n\r\n  const user = useSelector((state: RootReducerType) => state.users.user);\r\n\r\n  const checkAuth = ({ login, password }: UserAuthType) => {\r\n    if (users) {\r\n      const authUser = users.find(\r\n        (user: UserFirebaseType) =>\r\n          user.value.login === login &&\r\n          passwordHash.verify(password, user.value.password)\r\n      );\r\n      if (authUser) {\r\n        localStorage.setItem('user', JSON.stringify(authUser.value));\r\n        dispatch(putUser(authUser.value));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleChangeIndex = (index: number) => {\r\n    setValue(index);\r\n  };\r\n\r\n  return (\r\n    <Container id=\"container\" maxWidth=\"sm\" className=\"my-4\">\r\n      {user ? (\r\n        <Box>\r\n          <AppBar position=\"static\" color=\"default\">\r\n            <Tabs\r\n              value={value}\r\n              onChange={handleChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"fullWidth\"\r\n            >\r\n              <Tab label=\"Покупки\" />\r\n              <Tab label=\"Другое\" />\r\n            </Tabs>\r\n          </AppBar>\r\n          <SwipeableViews index={value} onChangeIndex={handleChangeIndex}>\r\n            <TabPanel value={value} index={0}>\r\n              <ItemAdd titleItem=\"purchases\" />\r\n              <ItemList titleItem=\"purchases\" />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1}>\r\n              <ItemAdd titleItem=\"others\" />\r\n              <ItemList titleItem=\"others\" />\r\n            </TabPanel>\r\n          </SwipeableViews>\r\n        </Box>\r\n      ) : (\r\n        <ModalLogin checkAuth={checkAuth} />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default React.memo(Home);\r\n","import { PUT_USER, PutUserActionType, UserType } from '../types';\r\n\r\nexport const putUser = (user: UserType): PutUserActionType => {\r\n  return { type: PUT_USER, payload: user };\r\n};\r\n","export const PUT_USER = 'PUT_USER';\r\n\r\nexport type UserAuthType = {\r\n  login: string;\r\n  password: string;\r\n};\r\n\r\nexport interface UserType extends UserAuthType {\r\n  name: string;\r\n}\r\n\r\nexport type UserFirebaseType = {\r\n  key: string;\r\n  value: UserAuthType;\r\n};\r\n\r\nexport type ItemType = {\r\n  completed: boolean;\r\n  text: string;\r\n};\r\n\r\nexport type ItemFirebaseType = {\r\n  key: string;\r\n  value: ItemType;\r\n};\r\n\r\nexport type InitialStateUsersType = {\r\n  user: UserType | null;\r\n};\r\n\r\nexport type PutUserActionType = {\r\n  type: typeof PUT_USER;\r\n  payload: UserType;\r\n};\r\n","import React from 'react';\nimport { Header } from './components/Header';\nimport Home from './components/Home';\n\nexport const App: React.FC = () => {\n  return (\n    <>\n      <Header />\n      <Home />\n    </>\n  );\n};\n","import { InitialStateUsersType, PUT_USER, PutUserActionType } from '../types';\r\n\r\nconst initialState: InitialStateUsersType = {\r\n  user: null\r\n};\r\n\r\nexport function users(\r\n  state = initialState,\r\n  action: PutUserActionType\r\n): InitialStateUsersType {\r\n  switch (action.type) {\r\n    case PUT_USER:\r\n      return { ...state, user: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { users } from '../reducers/users';\r\nimport { firebaseReducer } from 'react-redux-firebase';\r\n\r\nexport const rootReducer: any = combineReducers({\r\n  users: users,\r\n  firebase: firebaseReducer\r\n});\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase';\nimport logger from 'redux-logger';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { App } from './App';\nimport { rootReducer } from './reducers';\nimport { fbConfig } from './config';\nimport './index.css';\n\nconst rrfConfig = {\n  userProfile: 'users',\n  useFirestoreForProfile: true\n};\nfirebase.initializeApp(fbConfig);\nlet initialState = { users: { user: null } };\nif (typeof Storage !== 'undefined' && localStorage.user) {\n  let oldStateUser = JSON.parse(localStorage.user);\n  initialState = { users: { user: oldStateUser } };\n}\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(logger))\n);\nconst rrfProps = {\n  firebase,\n  config: rrfConfig,\n  dispatch: store.dispatch\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <ReactReduxFirebaseProvider {...rrfProps}>\n      <App />\n    </ReactReduxFirebaseProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n","export type FbConfigType = {\r\n  apiKey: string;\r\n  authDomain: string;\r\n  databaseURL: string;\r\n  projectId: string;\r\n  storageBucket: string;\r\n  messagingSenderId: string;\r\n  appId: string;\r\n  measurementId: string;\r\n};\r\n\r\nexport const fbConfig: FbConfigType = {\r\n  apiKey: 'AIzaSyAvYfkBEguJn7A9MHmwN5Q1E7X8Jce3E5o',\r\n  authDomain: 'todos-c16da.firebaseapp.com',\r\n  databaseURL: 'https://todos-c16da.firebaseio.com',\r\n  projectId: 'todos-c16da',\r\n  storageBucket: 'todos-c16da.appspot.com',\r\n  messagingSenderId: '753970111182',\r\n  appId: '1:753970111182:web:e49eac1bab66cc7ae1a69f',\r\n  measurementId: 'G-M35L5MWKTE'\r\n};\r\n"],"sourceRoot":""}