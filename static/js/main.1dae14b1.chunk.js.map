{"version":3,"sources":["components/Header.tsx","components/ModalLogin.tsx","components/Home.tsx","actions/users.ts","types/index.ts","reducers/users.ts","reducers/index.ts","index.tsx","config.ts","App.tsx"],"names":["Header","user","useSelector","state","users","AppBar","position","Toolbar","style","flexGrow","display","Grid","container","direction","alignItems","Box","name","IconButton","color","React","memo","props","Dialog","open","aria-labelledby","aria-describedby","DialogContent","Container","component","maxWidth","marginTop","flexDirection","Avatar","Typography","variant","width","onSubmit","event","preventDefault","login","currentTarget","value","password","checkAuth","TextField","margin","required","fullWidth","id","label","autoComplete","autoFocus","type","Button","dispatch","useDispatch","useState","newPurchaseText","setNewPurchaseText","useFirebaseConnect","path","purchases","firebase","ordered","useFirebase","addPurchase","text","trim","newPurchase","completed","push","className","justify","onChange","target","aria-label","onClick","fontSize","isLoaded","isEmpty","textAlign","List","map","purchase","labelId","key","ListItem","button","divider","ListItemIcon","Checkbox","inputProps","checked","update","updatePurchase","ListItemText","primary","ListItemSecondaryAction","remove","authUser","find","passwordHash","verify","localStorage","setItem","JSON","stringify","payload","putUser","initialState","rootReducer","combineReducers","action","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Storage","parse","store","createStore","applyMiddleware","logger","rrfProps","config","userProfile","useFirestoreForProfile","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1dae14b1.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { RootReducerType } from '../reducers';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const Header: React.FC = () => {\r\n  const user = useSelector((state: RootReducerType) => state.users.user);\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <div style={{ flexGrow: 1 }} />\r\n        <div style={{ display: 'flex' }}>\r\n          <Grid container direction=\"row\" alignItems=\"center\">\r\n            {user && <Box>Привет, {user.name}</Box>}\r\n\r\n            <IconButton color=\"inherit\">\r\n              <AccountCircle />\r\n            </IconButton>\r\n          </Grid>\r\n        </div>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { UserAuthType } from '../types';\r\n\r\ntype PropsType = {\r\n  checkAuth: ({ login, password }: UserAuthType) => void;\r\n};\r\n\r\nconst ModalLogin: React.FC<PropsType> = props => {\r\n  const handleClickAuth = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const login = event.currentTarget.login.value;\r\n    const password = event.currentTarget.password.value;\r\n\r\n    props.checkAuth({ login, password });\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={true}\r\n      aria-labelledby=\"scroll-dialog-title\"\r\n      aria-describedby=\"scroll-dialog-description\"\r\n    >\r\n      <DialogContent>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <div\r\n            style={{\r\n              marginTop: 50,\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center'\r\n            }}\r\n          >\r\n            <Avatar>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Авторизация\r\n            </Typography>\r\n            <form\r\n              style={{ width: '100%', marginTop: '8px' }}\r\n              onSubmit={handleClickAuth}\r\n            >\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"login\"\r\n                label=\"Login\"\r\n                name=\"login\"\r\n                autoComplete=\"login\"\r\n                autoFocus\r\n              />\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n              />\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ margin: '24px 0 16px' }}\r\n              >\r\n                Войти\r\n              </Button>\r\n            </form>\r\n          </div>\r\n        </Container>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default React.memo(ModalLogin);\r\n","import React from 'react';\r\nimport {\r\n  useFirebase,\r\n  useFirebaseConnect,\r\n  isLoaded,\r\n  isEmpty\r\n} from 'react-redux-firebase';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport passwordHash from 'password-hash';\r\nimport { RootReducerType } from '../reducers';\r\nimport ModalLogin from './ModalLogin';\r\nimport { UserAuthType, UserFirebaseType, PurchaseFirebaseType } from '../types';\r\nimport { putUser } from '../actions/users';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddCircleOutline from '@material-ui/icons/AddCircleOutline';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst Home: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const [newPurchaseText, setNewPurchaseText] = React.useState('');\r\n\r\n  useFirebaseConnect([{ path: 'purchases' }, { path: 'users' }]);\r\n\r\n  const purchases = useSelector(\r\n    (state: RootReducerType) => state.firebase.ordered.purchases\r\n  );\r\n  const users = useSelector(\r\n    (state: RootReducerType): any => state.firebase.ordered.users\r\n  );\r\n  const user = useSelector((state: RootReducerType) => state.users.user);\r\n\r\n  const firebase = useFirebase();\r\n\r\n  const updatePurchase = (purchase: PurchaseFirebaseType) => {\r\n    firebase.update(`purchases/${purchase.key}`, {\r\n      completed: !purchase.value.completed\r\n    });\r\n  };\r\n\r\n  const removePurchase = (key: string) => {\r\n    firebase.remove(`purchases/${key}`);\r\n  };\r\n\r\n  const addPurchase = () => {\r\n    const text = newPurchaseText.trim();\r\n    const newPurchase = {\r\n      text: text,\r\n      completed: false\r\n    };\r\n    if (text) {\r\n      firebase.push('purchases', newPurchase);\r\n      setNewPurchaseText('');\r\n    }\r\n  };\r\n\r\n  const checkAuth = ({ login, password }: UserAuthType) => {\r\n    if (users) {\r\n      const authUser = users.find(\r\n        (user: UserFirebaseType) =>\r\n          user.value.login === login &&\r\n          passwordHash.verify(password, user.value.password)\r\n      );\r\n      if (authUser) {\r\n        localStorage.setItem('user', JSON.stringify(authUser.value));\r\n        dispatch(putUser(authUser.value));\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container id=\"container\" maxWidth=\"sm\" className=\"my-4\">\r\n      {user ? (\r\n        <Box>\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"space-around\"\r\n            alignItems=\"center\"\r\n          >\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              style={{ width: '70%' }}\r\n              value={newPurchaseText}\r\n              onChange={event => setNewPurchaseText(event.target.value)}\r\n            />\r\n            <IconButton\r\n              aria-label=\"comments\"\r\n              onClick={addPurchase}\r\n              className=\"icon-button\"\r\n            >\r\n              <AddCircleOutline color=\"primary\" fontSize=\"large\" />\r\n            </IconButton>\r\n            <Button\r\n              variant=\"contained\"\r\n              onClick={addPurchase}\r\n              color=\"primary\"\r\n              className=\"button\"\r\n            >\r\n              Добавить\r\n            </Button>\r\n          </Grid>\r\n\r\n          {isLoaded(purchases) ? (\r\n            !isEmpty(purchases) ? (\r\n              <List>\r\n                {purchases.map((purchase: any) => {\r\n                  const labelId = `checkbox-list-label-${purchase.key}`;\r\n\r\n                  return (\r\n                    <ListItem key={purchase.key} button divider>\r\n                      <ListItemIcon>\r\n                        <Checkbox\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                          checked={purchase.value.completed}\r\n                          className={\r\n                            purchase.value.completed ? 'color-green' : ''\r\n                          }\r\n                          onChange={() => updatePurchase(purchase)}\r\n                        />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        id={labelId}\r\n                        className={\r\n                          purchase.value.completed ? 'line-through' : ''\r\n                        }\r\n                        primary={purchase.value.text}\r\n                      />\r\n                      <ListItemSecondaryAction>\r\n                        <IconButton\r\n                          aria-label=\"comments\"\r\n                          onClick={() => removePurchase(purchase.key)}\r\n                        >\r\n                          <DeleteIcon style={{ color: 'red' }} />\r\n                        </IconButton>\r\n                      </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                  );\r\n                })}\r\n              </List>\r\n            ) : (\r\n              <Box textAlign=\"center\" component=\"h3\">\r\n                Покупок нет\r\n              </Box>\r\n            )\r\n          ) : (\r\n            <Box textAlign=\"center\" component=\"h3\">\r\n              Loading . . .\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      ) : (\r\n        <ModalLogin checkAuth={checkAuth} />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default React.memo(Home);\r\n","import { PUT_USER, PutUserActionType, UserType } from '../types';\r\n\r\nexport const putUser = (user: UserType): PutUserActionType => {\r\n  return { type: PUT_USER, payload: user };\r\n};\r\n","export const PUT_USER = 'PUT_USER';\r\n\r\nexport type UserAuthType = {\r\n  login: string;\r\n  password: string;\r\n};\r\n\r\nexport interface UserType extends UserAuthType {\r\n  name: string;\r\n}\r\n\r\nexport type UserFirebaseType = {\r\n  key: string;\r\n  value: UserAuthType;\r\n};\r\n\r\nexport type PurchaseType = {\r\n  completed: boolean;\r\n  text: string;\r\n};\r\n\r\nexport type PurchaseFirebaseType = {\r\n  key: string;\r\n  value: PurchaseType;\r\n};\r\n\r\nexport type InitialStateUsersType = {\r\n  user: UserType | null;\r\n};\r\n\r\nexport type PutUserActionType = {\r\n  type: typeof PUT_USER;\r\n  payload: UserType;\r\n};\r\n","import { InitialStateUsersType, PUT_USER, PutUserActionType } from '../types';\r\n\r\nconst initialState: InitialStateUsersType = {\r\n  user: null\r\n};\r\n\r\nexport function users(\r\n  state = initialState,\r\n  action: PutUserActionType\r\n): InitialStateUsersType {\r\n  switch (action.type) {\r\n    case PUT_USER:\r\n      return { ...state, user: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { users } from '../reducers/users';\r\nimport { firebaseReducer } from 'react-redux-firebase';\r\n\r\nexport const rootReducer = combineReducers({\r\n  users: users,\r\n  firebase: firebaseReducer\r\n});\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase';\nimport logger from 'redux-logger';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport { createStore, applyMiddleware } from 'redux';\n\nimport { App } from './App';\nimport { rootReducer } from './reducers';\nimport { fbConfig } from './config';\nimport './index.css';\n\nconst rrfConfig = {\n  userProfile: 'users',\n  useFirestoreForProfile: true\n};\nfirebase.initializeApp(fbConfig);\nlet initialState = { users: { user: null } };\nif (typeof Storage !== 'undefined' && localStorage.user) {\n  let oldStateUser = JSON.parse(localStorage.user);\n  initialState = { users: { user: oldStateUser } };\n}\nconst store = createStore(rootReducer, initialState, applyMiddleware(logger));\nconst rrfProps = {\n  firebase,\n  config: rrfConfig,\n  dispatch: store.dispatch\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <ReactReduxFirebaseProvider {...rrfProps}>\n      <App />\n    </ReactReduxFirebaseProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n","export type FbConfigType = {\r\n  apiKey: string;\r\n  authDomain: string;\r\n  databaseURL: string;\r\n  projectId: string;\r\n  storageBucket: string;\r\n  messagingSenderId: string;\r\n  appId: string;\r\n  measurementId: string;\r\n};\r\n\r\nexport const fbConfig: FbConfigType = {\r\n  apiKey: 'AIzaSyAvYfkBEguJn7A9MHmwN5Q1E7X8Jce3E5o',\r\n  authDomain: 'todos-c16da.firebaseapp.com',\r\n  databaseURL: 'https://todos-c16da.firebaseio.com',\r\n  projectId: 'todos-c16da',\r\n  storageBucket: 'todos-c16da.appspot.com',\r\n  messagingSenderId: '753970111182',\r\n  appId: '1:753970111182:web:e49eac1bab66cc7ae1a69f',\r\n  measurementId: 'G-M35L5MWKTE'\r\n};\r\n","import React from 'react';\nimport { Header } from './components/Header';\nimport Home from './components/Home';\n\nexport const App: React.FC = () => {\n  return (\n    <>\n      <Header />\n      <Home />\n    </>\n  );\n};\n"],"sourceRoot":""}