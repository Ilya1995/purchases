{"version":3,"sources":["components/Header.tsx","actions/users.ts","types/index.ts","components/ModalLogin.tsx","components/ItemAdd.tsx","selectors.ts","components/ItemList.tsx","components/Home.tsx","App.tsx","reducers/users.ts","reducers/index.ts","index.tsx","config.ts"],"names":["Header","user","useSelector","state","users","dispatch","useDispatch","AppBar","position","Toolbar","Box","flexGrow","display","Grid","container","direction","alignItems","name","IconButton","color","onClick","localStorage","removeItem","type","React","memo","props","Dialog","open","aria-labelledby","aria-describedby","DialogContent","Container","component","maxWidth","mt","flexDirection","Avatar","Typography","variant","style","width","marginTop","onSubmit","event","preventDefault","login","currentTarget","value","password","checkAuth","TextField","margin","required","fullWidth","id","label","autoComplete","autoFocus","Button","titleItem","useState","newItemText","setNewItemText","inputEl","useRef","document","createElement","firebase","useFirebase","addItem","text","trim","newItem","completed","timestamp","Date","now","push","current","focus","justify","multiline","inputRef","onChange","target","aria-label","className","fontSize","sortItemsSelector","createSelector","ordered","items","sort","a","b","selectNumOfTodosWithIsDone","useMemo","fakeLoading","setFakeLoading","useEffect","setTimeout","key","remove","isLoaded","isEmpty","textAlign","List","map","item","labelId","ListItem","button","divider","ListItemIcon","Checkbox","inputProps","checked","update","updateItem","ListItemText","primary","marginRight","ListItemSecondaryAction","forEach","marginLeft","TabPanel","children","index","other","role","hidden","py","setValue","useFirebaseConnect","path","Tabs","newValue","indicatorColor","textColor","Tab","onChangeIndex","authUser","find","passwordHash","verify","setItem","JSON","stringify","payload","putUser","App","initialState","rootReducer","combineReducers","action","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Storage","parse","store","createStore","composeWithDevTools","rrfProps","config","userProfile","useFirestoreForProfile","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d2d740a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport ExitToAppOutlinedIcon from '@material-ui/icons/ExitToAppOutlined';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { RootReducerType } from '../reducers';\r\nimport { logoutUser } from '../actions/users';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport const Header: React.FC = () => {\r\n  const user = useSelector((state: RootReducerType) => state.users.user);\r\n\r\n  const dispatch = useDispatch();\r\n  const handleClick = () => {\r\n    localStorage.removeItem('user');\r\n    dispatch(logoutUser());\r\n  };\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Box flexGrow={1} />\r\n        <Box display={'flex'}>\r\n          <Grid container direction=\"row\" alignItems=\"center\">\r\n            {user ? (\r\n              <>\r\n                <Box>Привет, {user.name}</Box>\r\n                <IconButton color=\"inherit\" onClick={handleClick}>\r\n                  <ExitToAppOutlinedIcon />\r\n                </IconButton>\r\n              </>\r\n            ) : (\r\n              <IconButton color=\"inherit\">\r\n                <AccountCircle />\r\n              </IconButton>\r\n            )}\r\n          </Grid>\r\n        </Box>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n","import {\r\n  PUT_USER,\r\n  LOGOUT_USER,\r\n  PutUserActionType,\r\n  LogoutUserActionType,\r\n  UserType,\r\n} from '../types';\r\n\r\nexport const putUser = (user: UserType): PutUserActionType => {\r\n  return { type: PUT_USER, payload: user };\r\n};\r\n\r\nexport const logoutUser = (): LogoutUserActionType => {\r\n  return { type: LOGOUT_USER };\r\n};\r\n","export const PUT_USER = 'PUT_USER';\r\nexport const LOGOUT_USER = 'LOGOUT_USER';\r\n\r\nexport type UserAuthType = {\r\n  login: string;\r\n  password: string;\r\n};\r\n\r\nexport interface UserType extends UserAuthType {\r\n  name: string;\r\n}\r\n\r\nexport type UserFirebaseType = {\r\n  key: string;\r\n  value: UserAuthType;\r\n};\r\n\r\nexport type ItemType = {\r\n  completed: boolean;\r\n  text: string;\r\n  timestamp: number;\r\n};\r\n\r\nexport type ItemFirebaseType = {\r\n  key: string;\r\n  value: ItemType;\r\n};\r\n\r\nexport type InitialStateUsersType = {\r\n  user: UserType | null;\r\n};\r\n\r\nexport type PutUserActionType = {\r\n  type: typeof PUT_USER;\r\n  payload: UserType;\r\n};\r\n\r\nexport type LogoutUserActionType = {\r\n  type: typeof LOGOUT_USER;\r\n};\r\n\r\nexport type UserActionTypes = PutUserActionType | LogoutUserActionType;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Container from '@material-ui/core/Container';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport { UserAuthType } from '../types';\r\n\r\ntype PropsType = {\r\n  checkAuth: ({ login, password }: UserAuthType) => void;\r\n};\r\n\r\nconst ModalLogin: React.FC<PropsType> = (props) => {\r\n  const handleClickAuth = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const login = event.currentTarget.login.value;\r\n    const password = event.currentTarget.password.value;\r\n    props.checkAuth({ login, password });\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={true}\r\n      aria-labelledby=\"scroll-dialog-title\"\r\n      aria-describedby=\"scroll-dialog-description\"\r\n    >\r\n      <DialogContent>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <Box\r\n            mt={6}\r\n            display={'flex'}\r\n            flexDirection={'column'}\r\n            alignItems={'center'}\r\n          >\r\n            <Avatar>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Авторизация\r\n            </Typography>\r\n            <form\r\n              style={{ width: '100%', marginTop: '8px' }}\r\n              onSubmit={handleClickAuth}\r\n            >\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"login\"\r\n                label=\"Login\"\r\n                name=\"login\"\r\n                autoComplete=\"login\"\r\n                autoFocus\r\n              />\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n              />\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ margin: '24px 0 16px' }}\r\n              >\r\n                Войти\r\n              </Button>\r\n            </form>\r\n          </Box>\r\n        </Container>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default React.memo(ModalLogin);\r\n","import React, { useRef } from 'react';\r\nimport { useFirebase } from 'react-redux-firebase';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleOutline from '@material-ui/icons/AddCircleOutline';\r\n\r\ntype PropsType = {\r\n  titleItem: string;\r\n};\r\n\r\nconst ItemAdd: React.FC<PropsType> = ({ titleItem }) => {\r\n  const [newItemText, setNewItemText] = React.useState('');\r\n  const inputEl = useRef(document.createElement('input'));\r\n  const firebase = useFirebase();\r\n\r\n  const addItem = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    const text = newItemText.trim();\r\n    const newItem = {\r\n      text: text,\r\n      completed: false,\r\n      timestamp: Date.now(),\r\n    };\r\n    if (text) {\r\n      firebase.push(titleItem, newItem);\r\n      setNewItemText('');\r\n      inputEl.current.focus();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={addItem}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          style={{ width: '70%' }}\r\n          value={newItemText}\r\n          multiline\r\n          inputRef={inputEl}\r\n          onChange={(event) => setNewItemText(event.target.value)}\r\n        />\r\n        <IconButton\r\n          aria-label=\"comments\"\r\n          onClick={addItem}\r\n          className=\"icon-button\"\r\n        >\r\n          <AddCircleOutline color=\"primary\" fontSize=\"large\" />\r\n        </IconButton>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={addItem}\r\n          color=\"primary\"\r\n          className=\"button\"\r\n        >\r\n          Добавить\r\n        </Button>\r\n      </Grid>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default React.memo(ItemAdd);\r\n","import { createSelector } from 'reselect';\r\nimport { RootReducerType } from './reducers';\r\nimport { ItemFirebaseType } from './types';\r\n\r\nexport const sortItemsSelector = () =>\r\n  createSelector(\r\n    (state: RootReducerType, titleItem: string) =>\r\n      state.firebase.ordered[titleItem],\r\n    (items: ItemFirebaseType[]) =>\r\n      items\r\n        ?.sort((a, b) => (a.value.timestamp > b.value.timestamp ? 1 : -1))\r\n        .sort((a, b) => (a.value.completed > b.value.completed ? 1 : -1))\r\n  );\r\n","import React, { useMemo, useEffect, useState } from 'react';\r\nimport { useFirebase, isLoaded, isEmpty } from 'react-redux-firebase';\r\nimport { useSelector } from 'react-redux';\r\nimport { ItemFirebaseType } from '../types';\r\nimport { RootReducerType } from '../reducers';\r\nimport { sortItemsSelector } from '../selectors';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\ntype PropsType = {\r\n  titleItem: string;\r\n};\r\n\r\nconst ItemList: React.FC<PropsType> = ({ titleItem }) => {\r\n  const selectNumOfTodosWithIsDone = useMemo(sortItemsSelector, []);\r\n  const items = useSelector((state: RootReducerType) =>\r\n    selectNumOfTodosWithIsDone(state, titleItem)\r\n  );\r\n\r\n  const [fakeLoading, setFakeLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setFakeLoading(false);\r\n    }, 2500);\r\n  }, [items, setFakeLoading]);\r\n\r\n  const firebase = useFirebase();\r\n\r\n  const updateItem = (item: ItemFirebaseType) => {\r\n    firebase.update(`${titleItem}/${item.key}`, {\r\n      completed: !item.value.completed,\r\n    });\r\n  };\r\n\r\n  const removeItem = (key: string) => {\r\n    firebase.remove(`${titleItem}/${key}`);\r\n  };\r\n\r\n  const removeAllItem = () => {\r\n    items.forEach((item) => removeItem(item.key));\r\n  };\r\n\r\n  const removeCompletedItem = () => {\r\n    items.forEach((item) => item.value.completed && removeItem(item.key));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoaded(items) || !fakeLoading ? (\r\n        !isEmpty(items) ? (\r\n          <List>\r\n            {items.map((item: ItemFirebaseType) => {\r\n              const labelId = `checkbox-list-label-${item.key}`;\r\n\r\n              return (\r\n                <ListItem key={item.key} button divider>\r\n                  <ListItemIcon>\r\n                    <Checkbox\r\n                      inputProps={{ 'aria-labelledby': labelId }}\r\n                      checked={item.value.completed}\r\n                      className={item.value.completed ? 'color-green' : ''}\r\n                      onChange={() => updateItem(item)}\r\n                    />\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    id={labelId}\r\n                    className={item.value.completed ? 'line-through' : ''}\r\n                    primary={item.value.text}\r\n                    style={{ marginRight: 5 }}\r\n                  />\r\n                  <ListItemSecondaryAction>\r\n                    <IconButton\r\n                      aria-label=\"comments\"\r\n                      onClick={() => removeItem(item.key)}\r\n                    >\r\n                      <DeleteIcon style={{ color: 'red' }} />\r\n                    </IconButton>\r\n                  </ListItemSecondaryAction>\r\n                </ListItem>\r\n              );\r\n            })}\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={removeCompletedItem}\r\n                color=\"primary\"\r\n                className=\"button-remove\"\r\n              >\r\n                Удалить <CheckBoxIcon style={{ marginLeft: 10 }} />\r\n              </Button>\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={removeAllItem}\r\n                color=\"primary\"\r\n                className=\"button-remove\"\r\n              >\r\n                Удалить все\r\n              </Button>\r\n            </Grid>\r\n          </List>\r\n        ) : (\r\n          <Box textAlign=\"center\" component=\"h3\">\r\n            Список пуст\r\n          </Box>\r\n        )\r\n      ) : (\r\n        <Box textAlign=\"center\" component=\"h3\">\r\n          Loading . . .\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(ItemList);\r\n","import React from 'react';\r\nimport { useFirebaseConnect } from 'react-redux-firebase';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport passwordHash from 'password-hash';\r\nimport { RootReducerType } from '../reducers';\r\nimport ModalLogin from './ModalLogin';\r\nimport ItemAdd from './ItemAdd';\r\nimport ItemList from './ItemList';\r\nimport { UserAuthType, UserFirebaseType } from '../types';\r\nimport { putUser } from '../actions/users';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  dir?: string;\r\n  index: any;\r\n  value: any;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box py={3}>{children}</Box>}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nconst Home: React.FC = () => {\r\n  const [value, setValue] = React.useState(0);\r\n  const dispatch = useDispatch();\r\n\r\n  useFirebaseConnect([\r\n    { path: 'purchases' },\r\n    { path: 'others' },\r\n    { path: 'users' },\r\n  ]);\r\n\r\n  const users = useSelector(\r\n    (state: RootReducerType) => state.firebase.ordered.users\r\n  );\r\n\r\n  const user = useSelector((state: RootReducerType) => state.users.user);\r\n\r\n  const checkAuth = ({ login, password }: UserAuthType) => {\r\n    if (users) {\r\n      const authUser = users.find(\r\n        (user: UserFirebaseType) =>\r\n          user.value.login === login &&\r\n          passwordHash.verify(password, user.value.password)\r\n      );\r\n      if (authUser) {\r\n        localStorage.setItem('user', JSON.stringify(authUser.value));\r\n        dispatch(putUser(authUser.value));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleChangeIndex = (index: number) => {\r\n    setValue(index);\r\n  };\r\n\r\n  return (\r\n    <Container id=\"container\" maxWidth=\"sm\" className=\"my-4\">\r\n      {user ? (\r\n        <Box>\r\n          <AppBar position=\"static\" color=\"default\">\r\n            <Tabs\r\n              value={value}\r\n              onChange={handleChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"fullWidth\"\r\n            >\r\n              <Tab label=\"Покупки\" />\r\n              <Tab label=\"Другое\" />\r\n            </Tabs>\r\n          </AppBar>\r\n          <SwipeableViews index={value} onChangeIndex={handleChangeIndex}>\r\n            <TabPanel value={value} index={0}>\r\n              <ItemAdd titleItem=\"purchases\" />\r\n              <ItemList titleItem=\"purchases\" />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1}>\r\n              <ItemAdd titleItem=\"others\" />\r\n              <ItemList titleItem=\"others\" />\r\n            </TabPanel>\r\n          </SwipeableViews>\r\n        </Box>\r\n      ) : (\r\n        <ModalLogin checkAuth={checkAuth} />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default React.memo(Home);\r\n","import React from 'react';\r\nimport { Header } from './components/Header';\r\nimport Home from './components/Home';\r\n\r\nexport const App: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Home />\r\n    </>\r\n  );\r\n};\r\n","import {\r\n  InitialStateUsersType,\r\n  PUT_USER,\r\n  LOGOUT_USER,\r\n  UserActionTypes,\r\n} from '../types';\r\n\r\nconst initialState: InitialStateUsersType = {\r\n  user: null,\r\n};\r\n\r\nexport function users(\r\n  state = initialState,\r\n  action: UserActionTypes\r\n): InitialStateUsersType {\r\n  switch (action.type) {\r\n    case PUT_USER:\r\n      return { ...state, user: action.payload };\r\n    case LOGOUT_USER:\r\n      return { ...state, user: null };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { users } from '../reducers/users';\r\nimport { InitialStateUsersType, UserType, ItemType } from '../types';\r\nimport { firebaseReducer, FirebaseReducer } from 'react-redux-firebase';\r\n\r\ntype ProfileType = {\r\n  isLoaded: boolean;\r\n  isEmpty: boolean;\r\n};\r\n\r\ntype DBSchema = {\r\n  users: UserType;\r\n  purchases: ItemType;\r\n  others: ItemType;\r\n  [name: string]: any;\r\n};\r\n\r\ntype RootState = {\r\n  users: InitialStateUsersType;\r\n  firebase: FirebaseReducer.Reducer<ProfileType, DBSchema>;\r\n};\r\n\r\nexport const rootReducer = combineReducers<RootState>({\r\n  users,\r\n  firebase: firebaseReducer,\r\n});\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\nimport { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { App } from './App';\r\nimport { rootReducer } from './reducers';\r\nimport { fbConfig } from './config';\r\nimport './index.css';\r\n\r\nconst rrfConfig = {\r\n  userProfile: 'users',\r\n  useFirestoreForProfile: true\r\n};\r\nfirebase.initializeApp(fbConfig);\r\nlet initialState = { users: { user: null } };\r\nif (typeof Storage !== 'undefined' && localStorage.user) {\r\n  let oldStateUser = JSON.parse(localStorage.user);\r\n  initialState = { users: { user: oldStateUser } };\r\n}\r\nconst store = createStore(rootReducer, initialState, composeWithDevTools());\r\nconst rrfProps = {\r\n  firebase,\r\n  config: rrfConfig,\r\n  dispatch: store.dispatch\r\n};\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ReactReduxFirebaseProvider {...rrfProps}>\r\n      <App />\r\n    </ReactReduxFirebaseProvider>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n","export type FbConfigType = {\r\n  apiKey: string;\r\n  authDomain: string;\r\n  databaseURL: string;\r\n  projectId: string;\r\n  storageBucket: string;\r\n  messagingSenderId: string;\r\n  appId: string;\r\n  measurementId: string;\r\n};\r\n\r\nexport const fbConfig: FbConfigType = {\r\n  apiKey: 'AIzaSyAvYfkBEguJn7A9MHmwN5Q1E7X8Jce3E5o',\r\n  authDomain: 'todos-c16da.firebaseapp.com',\r\n  databaseURL: 'https://todos-c16da.firebaseio.com',\r\n  projectId: 'todos-c16da',\r\n  storageBucket: 'todos-c16da.appspot.com',\r\n  messagingSenderId: '753970111182',\r\n  appId: '1:753970111182:web:e49eac1bab66cc7ae1a69f',\r\n  measurementId: 'G-M35L5MWKTE',\r\n};\r\n"],"sourceRoot":""}