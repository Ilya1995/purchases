{"version":3,"sources":["components/Header.tsx","actions/users.ts","types/index.ts","components/ModalLogin.tsx","components/ItemAdd.tsx","selectors.ts","components/ItemList.tsx","components/Home.tsx","App.tsx","reducers/users.ts","reducers/index.ts","index.tsx","config.ts"],"names":["Header","user","useSelector","state","users","dispatch","useDispatch","AppBar","position","Toolbar","Box","flexGrow","display","Grid","container","direction","alignItems","name","IconButton","color","onClick","localStorage","removeItem","type","React","memo","props","Dialog","open","aria-labelledby","aria-describedby","DialogContent","Container","component","maxWidth","mt","flexDirection","Avatar","Typography","variant","style","width","marginTop","onSubmit","event","preventDefault","login","currentTarget","value","password","checkAuth","TextField","margin","required","fullWidth","id","label","autoComplete","autoFocus","Button","titleItem","useState","newItemText","setNewItemText","inputEl","useRef","document","createElement","firebase","useFirebase","addItem","text","trim","newItem","userId","completed","timestamp","Date","now","push","current","focus","justify","multiline","inputRef","onChange","target","aria-label","className","fontSize","sortItemsSelector","createSelector","ordered","items","sort","a","b","selectNumOfTodosWithIsDone","useMemo","fakeLoading","setFakeLoading","useEffect","setTimeout","key","remove","isLoaded","isEmpty","textAlign","List","map","item","labelId","ListItem","button","divider","ListItemIcon","Checkbox","inputProps","checked","update","updateItem","ListItemText","primary","marginRight","ListItemSecondaryAction","forEach","marginLeft","TabPanel","children","index","other","role","hidden","py","setValue","useFirebaseConnect","path","Tabs","newValue","indicatorColor","textColor","Tab","onChangeIndex","authUser","find","passwordHash","verify","setItem","JSON","stringify","payload","putUser","App","initialState","rootReducer","combineReducers","action","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Storage","parse","store","createStore","composeWithDevTools","rrfProps","config","userProfile","useFirestoreForProfile","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0e75f104.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport AccountCircle from '@material-ui/icons/AccountCircle'\r\nimport ExitToAppOutlinedIcon from '@material-ui/icons/ExitToAppOutlined'\r\nimport Box from '@material-ui/core/Box'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { RootReducerType } from '../reducers'\r\nimport { logoutUser } from '../actions/users'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nexport const Header: React.FC = () => {\r\n  const user = useSelector((state: RootReducerType) => state.users.user)\r\n\r\n  const dispatch = useDispatch()\r\n  const handleClick = () => {\r\n    localStorage.removeItem('user')\r\n    dispatch(logoutUser())\r\n  }\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Box flexGrow={1} />\r\n        <Box display={'flex'}>\r\n          <Grid container direction=\"row\" alignItems=\"center\">\r\n            {user ? (\r\n              <>\r\n                <Box>Привет, {user.name}</Box>\r\n                <IconButton color=\"inherit\" onClick={handleClick}>\r\n                  <ExitToAppOutlinedIcon />\r\n                </IconButton>\r\n              </>\r\n            ) : (\r\n              <IconButton color=\"inherit\">\r\n                <AccountCircle />\r\n              </IconButton>\r\n            )}\r\n          </Grid>\r\n        </Box>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import { PUT_USER, LOGOUT_USER, PutUserActionType, LogoutUserActionType, UserType } from '../types'\r\n\r\nexport const putUser = (user: UserType): PutUserActionType => {\r\n  return { type: PUT_USER, payload: user }\r\n}\r\n\r\nexport const logoutUser = (): LogoutUserActionType => {\r\n  return { type: LOGOUT_USER }\r\n}\r\n","export const PUT_USER = 'PUT_USER'\r\nexport const LOGOUT_USER = 'LOGOUT_USER'\r\n\r\nexport type UserAuthType = {\r\n  login: string\r\n  password: string\r\n}\r\n\r\nexport interface UserType extends UserAuthType {\r\n  id: number\r\n  name: string\r\n  gender: string\r\n}\r\n\r\nexport type UserFirebaseType = {\r\n  key: string\r\n  value: UserAuthType\r\n}\r\n\r\nexport type ItemType = {\r\n  completed: boolean\r\n  text: string\r\n  timestamp: number\r\n}\r\n\r\nexport type ItemFirebaseType = {\r\n  key: string\r\n  value: ItemType\r\n}\r\n\r\nexport type InitialStateUsersType = {\r\n  user: UserType | null\r\n}\r\n\r\nexport type PutUserActionType = {\r\n  type: typeof PUT_USER\r\n  payload: UserType\r\n}\r\n\r\nexport type LogoutUserActionType = {\r\n  type: typeof LOGOUT_USER\r\n}\r\n\r\nexport type UserActionTypes = PutUserActionType | LogoutUserActionType\r\n","import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport Container from '@material-ui/core/Container'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Box from '@material-ui/core/Box'\r\nimport { UserAuthType } from '../types'\r\n\r\ntype PropsType = {\r\n  checkAuth: ({ login, password }: UserAuthType) => void\r\n}\r\n\r\nconst ModalLogin: React.FC<PropsType> = (props) => {\r\n  const handleClickAuth = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault()\r\n    const login = event.currentTarget.login.value\r\n    const password = event.currentTarget.password.value\r\n    props.checkAuth({ login, password })\r\n  }\r\n\r\n  return (\r\n    <Dialog open={true} aria-labelledby=\"scroll-dialog-title\" aria-describedby=\"scroll-dialog-description\">\r\n      <DialogContent>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <Box mt={6} display={'flex'} flexDirection={'column'} alignItems={'center'}>\r\n            <Avatar>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Авторизация\r\n            </Typography>\r\n            <form style={{ width: '100%', marginTop: '8px' }} onSubmit={handleClickAuth}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"login\"\r\n                label=\"Login\"\r\n                name=\"login\"\r\n                autoComplete=\"login\"\r\n                autoFocus\r\n              />\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n              />\r\n              <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" style={{ margin: '24px 0 16px' }}>\r\n                Войти\r\n              </Button>\r\n            </form>\r\n          </Box>\r\n        </Container>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default React.memo(ModalLogin)\r\n","import React, { useRef } from 'react'\r\nimport { useFirebase } from 'react-redux-firebase'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport AddCircleOutline from '@material-ui/icons/AddCircleOutline'\r\nimport { UserType } from '../types'\r\n\r\ntype PropsType = {\r\n  user: UserType\r\n  titleItem: string\r\n}\r\n\r\nconst ItemAdd: React.FC<PropsType> = ({ user, titleItem }) => {\r\n  const [newItemText, setNewItemText] = React.useState('')\r\n  const inputEl = useRef(document.createElement('input'))\r\n  const firebase = useFirebase()\r\n\r\n  const addItem = (event: React.FormEvent) => {\r\n    event.preventDefault()\r\n    const text = newItemText.trim()\r\n    const newItem = {\r\n      userId: user.id,\r\n      text: text,\r\n      completed: false,\r\n      timestamp: Date.now(),\r\n    }\r\n\r\n    if (text) {\r\n      firebase.push(titleItem, newItem)\r\n      setNewItemText('')\r\n      inputEl.current.focus()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={addItem}>\r\n      <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          style={{ width: '70%' }}\r\n          value={newItemText}\r\n          multiline\r\n          inputRef={inputEl}\r\n          onChange={(event) => setNewItemText(event.target.value)}\r\n        />\r\n        <IconButton aria-label=\"comments\" onClick={addItem} className=\"icon-button\">\r\n          <AddCircleOutline color=\"primary\" fontSize=\"large\" />\r\n        </IconButton>\r\n        <Button variant=\"contained\" onClick={addItem} color=\"primary\" className=\"button\">\r\n          Добавить\r\n        </Button>\r\n      </Grid>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default React.memo(ItemAdd)\r\n","import { createSelector } from 'reselect'\r\nimport { RootReducerType } from './reducers'\r\nimport { ItemFirebaseType } from './types'\r\n\r\nexport const sortItemsSelector = () =>\r\n  createSelector(\r\n    (state: RootReducerType, titleItem: string) => state.firebase.ordered[titleItem],\r\n    (items: ItemFirebaseType[]) =>\r\n      items\r\n        ?.sort((a, b) => (a.value.timestamp > b.value.timestamp ? 1 : -1))\r\n        .sort((a, b) => (a.value.completed > b.value.completed ? 1 : -1))\r\n  )\r\n","import React, { useMemo, useEffect, useState } from 'react'\r\nimport { useFirebase, isLoaded, isEmpty } from 'react-redux-firebase'\r\nimport { useSelector } from 'react-redux'\r\nimport { ItemFirebaseType } from '../types'\r\nimport { RootReducerType } from '../reducers'\r\nimport { sortItemsSelector } from '../selectors'\r\nimport Button from '@material-ui/core/Button'\r\nimport Box from '@material-ui/core/Box'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\ntype PropsType = {\r\n  titleItem: string\r\n}\r\n\r\nconst ItemList: React.FC<PropsType> = ({ titleItem }) => {\r\n  const selectNumOfTodosWithIsDone = useMemo(sortItemsSelector, [])\r\n  const items = useSelector((state: RootReducerType) => selectNumOfTodosWithIsDone(state, titleItem))\r\n\r\n  const [fakeLoading, setFakeLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setFakeLoading(false)\r\n    }, 2500)\r\n  }, [items, setFakeLoading])\r\n\r\n  const firebase = useFirebase()\r\n\r\n  const updateItem = (item: ItemFirebaseType) => {\r\n    firebase.update(`${titleItem}/${item.key}`, {\r\n      completed: !item.value.completed,\r\n    })\r\n  }\r\n\r\n  const removeItem = (key: string) => {\r\n    firebase.remove(`${titleItem}/${key}`)\r\n  }\r\n\r\n  const removeAllItem = () => {\r\n    items.forEach((item) => removeItem(item.key))\r\n  }\r\n\r\n  const removeCompletedItem = () => {\r\n    items.forEach((item) => item.value.completed && removeItem(item.key))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoaded(items) || !fakeLoading ? (\r\n        !isEmpty(items) ? (\r\n          <List>\r\n            {items.map((item: ItemFirebaseType) => {\r\n              const labelId = `checkbox-list-label-${item.key}`\r\n\r\n              return (\r\n                <ListItem key={item.key} button divider>\r\n                  <ListItemIcon>\r\n                    <Checkbox\r\n                      inputProps={{ 'aria-labelledby': labelId }}\r\n                      checked={item.value.completed}\r\n                      className={item.value.completed ? 'color-green' : ''}\r\n                      onChange={() => updateItem(item)}\r\n                    />\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    id={labelId}\r\n                    className={item.value.completed ? 'line-through' : ''}\r\n                    primary={item.value.text}\r\n                    style={{ marginRight: 5 }}\r\n                  />\r\n                  <ListItemSecondaryAction>\r\n                    <IconButton aria-label=\"comments\" onClick={() => removeItem(item.key)}>\r\n                      <DeleteIcon style={{ color: 'red' }} />\r\n                    </IconButton>\r\n                  </ListItemSecondaryAction>\r\n                </ListItem>\r\n              )\r\n            })}\r\n            <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n              <Button variant=\"contained\" onClick={removeCompletedItem} color=\"primary\" className=\"button-remove\">\r\n                Удалить <CheckBoxIcon style={{ marginLeft: 10 }} />\r\n              </Button>\r\n\r\n              <Button variant=\"contained\" onClick={removeAllItem} color=\"primary\" className=\"button-remove\">\r\n                Удалить все\r\n              </Button>\r\n            </Grid>\r\n          </List>\r\n        ) : (\r\n          <Box textAlign=\"center\" component=\"h3\">\r\n            Список пуст\r\n          </Box>\r\n        )\r\n      ) : (\r\n        <Box textAlign=\"center\" component=\"h3\">\r\n          Loading . . .\r\n        </Box>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default React.memo(ItemList)\r\n","import React from 'react'\r\nimport { useFirebaseConnect } from 'react-redux-firebase'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport passwordHash from 'password-hash'\r\nimport { RootReducerType } from '../reducers'\r\nimport ModalLogin from './ModalLogin'\r\nimport ItemAdd from './ItemAdd'\r\nimport ItemList from './ItemList'\r\nimport { UserAuthType, UserFirebaseType } from '../types'\r\nimport { putUser } from '../actions/users'\r\nimport SwipeableViews from 'react-swipeable-views'\r\nimport Container from '@material-ui/core/Container'\r\nimport Box from '@material-ui/core/Box'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Tabs from '@material-ui/core/Tabs'\r\nimport Tab from '@material-ui/core/Tab'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode\r\n  dir?: string\r\n  index: any\r\n  value: any\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n  const { children, value, index, ...other } = props\r\n\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box py={3}>{children}</Box>}\r\n    </Typography>\r\n  )\r\n}\r\n\r\nconst Home: React.FC = () => {\r\n  const [value, setValue] = React.useState(0)\r\n  const dispatch = useDispatch()\r\n\r\n  useFirebaseConnect([{ path: 'purchases' }, { path: 'others' }, { path: 'users' }])\r\n\r\n  const users = useSelector((state: RootReducerType) => state.firebase.ordered.users)\r\n\r\n  const user = useSelector((state: RootReducerType) => state.users.user)\r\n\r\n  const checkAuth = ({ login, password }: UserAuthType) => {\r\n    if (users) {\r\n      const authUser = users.find(\r\n        (user: UserFirebaseType) => user.value.login === login && passwordHash.verify(password, user.value.password)\r\n      )\r\n      if (authUser) {\r\n        localStorage.setItem('user', JSON.stringify(authUser.value))\r\n        dispatch(putUser(authUser.value))\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    setValue(newValue)\r\n  }\r\n\r\n  const handleChangeIndex = (index: number) => {\r\n    setValue(index)\r\n  }\r\n\r\n  return (\r\n    <Container id=\"container\" maxWidth=\"sm\" className=\"my-4\">\r\n      {user ? (\r\n        <Box>\r\n          <AppBar position=\"static\" color=\"default\">\r\n            <Tabs\r\n              value={value}\r\n              onChange={handleChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"fullWidth\"\r\n            >\r\n              <Tab label=\"Покупки\" />\r\n              <Tab label=\"Другое\" />\r\n            </Tabs>\r\n          </AppBar>\r\n          <SwipeableViews index={value} onChangeIndex={handleChangeIndex}>\r\n            <TabPanel value={value} index={0}>\r\n              <ItemAdd user={user} titleItem=\"purchases\" />\r\n              <ItemList titleItem=\"purchases\" />\r\n            </TabPanel>\r\n            <TabPanel value={value} index={1}>\r\n              <ItemAdd user={user} titleItem=\"others\" />\r\n              <ItemList titleItem=\"others\" />\r\n            </TabPanel>\r\n          </SwipeableViews>\r\n        </Box>\r\n      ) : (\r\n        <ModalLogin checkAuth={checkAuth} />\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default React.memo(Home)\r\n","import React from 'react'\r\nimport { Header } from './components/Header'\r\nimport Home from './components/Home'\r\n\r\nexport const App: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Home />\r\n    </>\r\n  )\r\n}\r\n","import { InitialStateUsersType, PUT_USER, LOGOUT_USER, UserActionTypes } from '../types'\r\n\r\nconst initialState: InitialStateUsersType = {\r\n  user: null,\r\n}\r\n\r\nexport function users(state = initialState, action: UserActionTypes): InitialStateUsersType {\r\n  switch (action.type) {\r\n    case PUT_USER:\r\n      return { ...state, user: action.payload }\r\n    case LOGOUT_USER:\r\n      return { ...state, user: null }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { users } from '../reducers/users'\r\nimport { InitialStateUsersType, UserType, ItemType } from '../types'\r\nimport { firebaseReducer, FirebaseReducer } from 'react-redux-firebase'\r\n\r\ntype ProfileType = {\r\n  isLoaded: boolean\r\n  isEmpty: boolean\r\n}\r\n\r\ntype DBSchema = {\r\n  users: UserType\r\n  purchases: ItemType\r\n  others: ItemType\r\n  [name: string]: any\r\n}\r\n\r\ntype RootState = {\r\n  users: InitialStateUsersType\r\n  firebase: FirebaseReducer.Reducer<ProfileType, DBSchema>\r\n}\r\n\r\nexport const rootReducer = combineReducers<RootState>({\r\n  users,\r\n  firebase: firebaseReducer,\r\n})\r\n\r\nexport type RootReducerType = ReturnType<typeof rootReducer>\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase'\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/auth'\r\nimport 'firebase/database'\r\nimport { createStore } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { App } from './App'\r\nimport { rootReducer } from './reducers'\r\nimport { fbConfig } from './config'\r\nimport './index.css'\r\n\r\nconst rrfConfig = {\r\n  userProfile: 'users',\r\n  useFirestoreForProfile: true,\r\n}\r\nfirebase.initializeApp(fbConfig)\r\nlet initialState = { users: { user: null } }\r\nif (typeof Storage !== 'undefined' && localStorage.user) {\r\n  let oldStateUser = JSON.parse(localStorage.user)\r\n  initialState = { users: { user: oldStateUser } }\r\n}\r\nconst store = createStore(rootReducer, initialState, composeWithDevTools())\r\nconst rrfProps = {\r\n  firebase,\r\n  config: rrfConfig,\r\n  dispatch: store.dispatch,\r\n}\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ReactReduxFirebaseProvider {...rrfProps}>\r\n      <App />\r\n    </ReactReduxFirebaseProvider>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n","export type FbConfigType = {\r\n  apiKey: string\r\n  authDomain: string\r\n  databaseURL: string\r\n  projectId: string\r\n  storageBucket: string\r\n  messagingSenderId: string\r\n  appId: string\r\n  measurementId: string\r\n}\r\n\r\nexport const fbConfig: FbConfigType = {\r\n  apiKey: 'AIzaSyAvYfkBEguJn7A9MHmwN5Q1E7X8Jce3E5o',\r\n  authDomain: 'todos-c16da.firebaseapp.com',\r\n  databaseURL: 'https://todos-c16da.firebaseio.com',\r\n  projectId: 'todos-c16da',\r\n  storageBucket: 'todos-c16da.appspot.com',\r\n  messagingSenderId: '753970111182',\r\n  appId: '1:753970111182:web:e49eac1bab66cc7ae1a69f',\r\n  measurementId: 'G-M35L5MWKTE',\r\n}\r\n"],"sourceRoot":""}